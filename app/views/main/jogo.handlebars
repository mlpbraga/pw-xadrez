<div class="board-container">
  <div class="col" style="height: 500px;">
    <div id="status">A vez é do jogador <b>branco</b>.</div>
    <div id="board" style="width: 500px;margin: 20px auto 0;padding: 0 20px;text-align: center;max-width: 900px;"></div>
  </div>
  <div class="col" style="height: 500px;">
    <b>Mensagens</b>
    <form id="chat-form" class="chat-form">
      <input type="hidden" name="_csrf" value="{{csrf}}">
      <div id="messages-container" class="messages-container"></div>
      <div class="message-chat-input">
        <input class="chat-input" type="text" name="new-message" placeholder="Digite uma mensagem" />
        <button class="btn btn-primary" type="submit">Enviar</button>
      </div>
    </form>
  </div>
</div>

<script>
( function () {
    const socket = io('http://localhost:4567');
    const partida = {{partida_id}};
    const user_w = {{jogadorBranco}};
    {{#if jogadorPreto}}
    const user_b = {{jogadorPreto}};
    {{/if}}
    const user_current = {{jogadorLogado}};
    const my_color = user_current==user_w ? 'white' : 'black';
    const my_name = '{{author}}';
    const op_color = my_color == 'white' ? 'black' : 'white';
    const op_name = 'teste';
    const $status = $('#status');

    // encontrou um jogador b
    socket.emit('b_ok', { partida:partida });
    const game = new Chess();
    game.load('start');
    const conf = {
      draggable: true,
      orientation: my_color,
      position: game.fen(),
      moveSpeed: 'slow',
      pieceTheme: '/img/chesspieces/wikipedia/{piece}.png',
      onDragStart: onDragStart,
      onDrop: onDrop,
      onSnapEnd: onSnapEnd
    };
    const board = Chessboard('board', conf);

    function onDragStart (source, piece, position, orientation) {
      // do not pick up pieces if the game is over
      if (game.game_over()) return false;

      // only pick up pieces for its own color
      if ((my_color === 'white' && piece.search(/^b/) !== -1) ||
          (my_color === 'black' && piece.search(/^w/) !== -1)) {
        return false  
      }

      // only pick up pieces for the side to move
      if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
          (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
        return false
      }
    }

    function onDrop (source, target) {
      // see if the move is legal
      var move = game.move({
        from: source,
        to: target,
        promotion: 'q' // NOTE: always promote to a queen for example simplicity
      });

      // illegal move
      if (move === null) return 'snapback'

      // Enviar posição para adversário
      {{!-- socket.emit('move', {
        partida: {{partida_id}},
        source: source,
        target: target,
        position: game.fen(),
      }); --}}

      updateStatus();
    }

    // update the board position after the piece snap
    // for castling, en passant, pawn promotion
    function onSnapEnd () {
      board.position(game.fen())
    }

    function updateStatus () {
      var status = ''

      var moveColor = '<b>branco</b>'
      if (game.turn() === 'b') {
        moveColor = '<b>preto</b>'
      }

      // checkmate?
      if (game.in_checkmate()) {
        status = 'É xeque-mate! Vitória do jogador ' + moveColor + '!'
      }

      // empate? (draw)
      else if (game.in_draw()) {
        status = 'O jogo empatou!'
      }

      // game still on
      else {
        status = 'A vez é do jogador ' + moveColor + '.'

        // check?
        if (game.in_check()) {
          status += ', o jogador ' + moveColor + ' está em xeque.'
        }
      }

      $status.html(status)
    }

    {{!-- socket.on('move', function(move){
      if (move.partida == {{partida_id}}) {
        board.move(move.source + '-' + move.target);
        game.move({
          from: move.source,
          to: move.target,
          promotion: 'q' // NOTE: always promote to a queen for example simplicity
        }); 

        updateStatus();
      }
    });   --}}

    updateStatus();
    renderMessage = (message) => {
      const date = new Date(message.time);
      $('.messages-container').append(
        `
        <div class="message">
          <strong> ${message.author} </strong>: ${message.mensagem}
          <small>${date.getDate()}/${date.getMonth()}/${date.getYear()}  ${date.getHours()}:${date.getMinutes()}</smal>
        </div>
        `
      );
      var objDiv = document.getElementById("messages-container");
      objDiv.scrollTop = objDiv.scrollHeight;
    };

    window.onload = () => {
      socket.emit('renderChat', {{ partida_id }})
      socket.on('previousMessages', (messages) => {
        for (m of messages) {
          renderMessage({
            author: m.user.nome,
            mensagem: m.mensagem,
            time: m.createdAt,
          });
        }
      });
    }

    socket.on('receivedMessage', (message) => {
      renderMessage(message);
    });

    $('#chat-form').submit((event) => {
      event.preventDefault();
      let newMessage = $('.chat-input').val();
      if (newMessage.length) {
        const messageObj = {
          user_id: {{ sessionUid }},
          author: '{{author}}',
          mensagem: newMessage,
          partida_id: {{ partida_id }},
          createdAt: new Date(),
          time: new Date(),
        };
        socket.emit('sendMessage', messageObj);
        renderMessage(messageObj);
      }
    });
  })();
  
    // CHAT
    
</script>