<div class="board-container">
  <div class="col" style="height: 500px;">
    <div id="status">A vez é do jogador <b>branco</b>.</div>
    <div id="board" style="width: 500px;margin: 20px auto 0;padding: 0 20px;text-align: center;max-width: 900px;"></div>
  </div>
  <div class="col" style="height: 500px;">
      <b>Mensagens</b>
      <form id="chat-form" class="chat-form">
        <input type="hidden" name="_csrf" value="{{csrf}}">
        <div id="messages-container" class="messages-container"></div>
        <div class="message-chat-input">
          <input class="chat-input" type="text" name="new-message" placeholder="Digite uma mensagem"/>
          <button class="btn btn-primary" type="submit">Enviar</button>
        </div>
      </form>
    </div>
</div>

{{!-- FUNCIONALIDADE DE CHAT --}}
<script type="text/javascript">
  const socket = io('http://localhost:4567');
  
  renderMessage = (message) => {
    $('.messages-container').append(
      `
      <div class="message">
        <strong> ${message.author} </strong>: ${message.mensagem}
      </div>
      `
    );
    var objDiv = document.getElementById("messages-container");
    objDiv.scrollTop = objDiv.scrollHeight;
  };

  window.onload = () => {
    socket.emit('renderChat', {{partida_id}})

    socket.on('previousMessages', (messages) => {
      for (m of messages) {
        renderMessage({
          author: m.user.nome,
          mensagem: m.mensagem
        });
      }
    })
  }

  socket.on('receivedMessage', (message) => {
    renderMessage(message);
  });
  
  $('#chat-form').submit((event)=>{
    event.preventDefault();
    let newMessage = $('.chat-input').val();
    if (newMessage.length) {
      const messageObj = {
        user_id: {{sessionUid}},
        author: '{{author}}',
        mensagem: newMessage,
        partida_id: {{partida_id}}
      };
      console.log('messageObj', messageObj);
      socket.emit('sendMessage', messageObj);
      renderMessage(messageObj);
    }
  })
</script>

<script>
  const game = new Chess();
  const color = '{{color}}';
  const fen = 'start';
  const partida = {{partida_id}};

  game.load(fen); // fen é a posição das peças no tabuleiro

  const board = Chessboard('board', {
    draggable: true,
    orientation: (color == 'w') ? 'white' : 'black',
    position: fen,
    moveSpeed: 'slow',
    pieceTheme: '/img/chesspieces/wikipedia/{piece}.png',
    onDragStart: onDragStart, // quando o usuário pega a peça, para começar seu movimento
    onDrop: onDrop, // quando o usuário solta a peça, para encerrar seu movimento
    onSnapEnd: onSnapEnd // quando um jogador come a peça do outro, ou quando o peao chega no topo do campo do outro
  });

  function onDragStart(source, piece, position, orientation) {

    // nao permitir o movimento de peças em caso de game over
    if (game.game_over()) return false;

    // permitir apenas o movimento de peças de sua própria cor
    if ((color === 'w' && piece.search(/^b/) !== -1) ||
      (color === 'b' && piece.search(/^w/) !== -1)) {
      return false
    }

    // o jogador só pode mover peças caso seja sua vez de jogar
    if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
      return false
    }
  }

  function onDrop(source, target) {

    // verificar se o movimento feito é legal de acordo com as regras de xadrez
    var move = game.move({
      from: source,
      to: target,
      promotion: 'q' // NOTA: Para manter a simplicidade, peões só poderão ser promovidos para rainhas
    });

    // movimento ilegal, vamos retroceder a peça para a posição original
    if (move === null) return 'snapback'

    // **** Usar SOCKET.IO para enviar o movimento para o adversário **** // 

    updateStatus();
  }

  function onSnapEnd() {
    board.position(game.fen())
  }

  function updateStatus() {
    var status = ''

    var moveColor = '<b>branco</b>'
    if (game.turn() === 'b') {
      moveColor = '<b>preto</b>'
    }

    // checkmate?
    if (game.in_checkmate()) {
      status = 'É xeque-mate! Vitória do jogador ' + moveColor + '!'
    }

    // empate? (draw)
    else if (game.in_draw()) {
      status = 'O jogo empatou!'
    }

    // o jogo continua
    else {
      status = 'A vez é do jogador ' + moveColor + '.'

      // check?
      if (game.in_check()) {
        status += ', o jogador ' + moveColor + ' está em xeque.'
      }
    }

    document.getElementById('status').innerHTML = status;
  }

</script>